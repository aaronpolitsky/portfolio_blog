---
title: "Purrr for Data Validation"
subtitle: "Or: Nesting Functions Into a Tibble"
author: "Aaron Politsky"
date: "2/11/2024"
description: "Tidyverse R enthusiasts know about nesting grouped data into a column and iterating using purrr::map(), but did you know you could nest function source code? This post uses a data validation example to explain how I used this nest-and-iterate pattern over a set of validation tests while keeping the tests, their code, and their results in one Tidy tibble."
toc: TRUE
toc-location: left
categories: [data science, functional programming, purrr, nested tibbles, R]
---

# Intro

This post explains an insight I had when thinking about a data validation problem, and I hope this example problem will get you thinking more creatively about the possibilities of nested tibbles. (If you're not familiar with the nested data workflow, read this [this concise article](https://tidyr.tidyverse.org/articles/nest.html) first, and for more depth, read [this chapter of R4DS](https://r4ds.had.co.nz/many-models.html). I'll wait.)

OK, Great. Now you're at least somewhat familiar with the nested data workflow. That is, grouping your data and nesting each group's data into cells in a column called "data". You wind up with a Tidy, summarized tibble with one row per group so you can work with the nested data as a if it were a single value in a cell.

But did you ever think of nesting *source code* into a cell? If you're at all curious about how or why this might be a good idea, keep reading.

My specific problem required running a bunch of data validation tests on a dataset, and I wanted to neatly keep track of the tests, their code, and their results. This reminded me of the nested data workflow, but instead of iterating over groups of *data*, I wanted to iterate over a group of validation functions. My insight was to nest each test's *source code* into the tibble, execute each test on the data, and nest its results into another column, leaving me with a single, Tidy tibble having the test names, their code, and their results.

But why do it this way? Couldn't you use base R using several separate lists and a vector of test names to access them? Sure, but I prefer having all this in one table. When everything is neatly tied together in rows it's less error prone. Plus it's Tidy, so it will be easy to work with later using the typical tidyverse methods.

Whereas using separate lists, it's up to you to keep everything straight since the lists aren't aware of one another. Someone (such as *future me*) could come along and accidentally rename the elements of one of the lists without updating the others, and it would fail quietly.

Let's motivate this solution with an example problem.

# The Example Data Validation Problem

In my case, I periodically received new data, and I wanted to validate them after arrival to get a sense of reliability and readiness. I needed to test certain fields to determine if their values made sense and were analytically useful. I would run a set of tests on each value in the dataset in order to:

-   determine what subset of the data was OK to use right away,

-   judge whether the dataset as a whole was ok to use,

-   and decide whether I would need to contact the data provider to address any quality issues.

Many tests would be sanity checks, whether a datapoint fell between a lower and upper bound, among others. Others could be more complex. And each field would require its own set of validation tests, sometimes fairly unique to that field.

## Example Data

I'll use `iris` as the example dataset. It's got four decimal fields and one factor field per observation.

```{r echo=FALSE, message=FALSE}
library(tidyverse)

iris_tbl <- 
  iris %>% 
  as_tibble(rownames = "id")

iris_tbl
```

## The Field-Test Catalog

As I thought about the problem, it became clear that I would want to define a set of validation tests for each field and keep track of the field-test catalog in a list or a table structure.

The catalog of field-tests might look something like this:

| Field Name   | Test Name                                        |
|--------------|--------------------------------------------------|
| Sepal.Length | is_missing                                       |
| Sepal.Length | is_not_between_3_and_7                           |
| Sepal.Length | is_less_than_sepal_width                         |
| ...          | ...                                              |
| Sepal.Width  | is_missing                                       |
| Sepal.Width  | ...                                              |
| ...          | ...                                              |
| Petal.Length | is_missing                                       |
| Petal.Length | is_not_between_4_and_7_when_species_is_virginica |
| ...          |                                                  |

## Desired Output Form

I wanted to generate a set of results for each field-test that I could tie back to individual observations in the data. Results for one particular field's test would look like this:

| Id  | Result |
|-----|--------|
| 1   | FALSE  |
| 2   | FALSE  |
| ... | ...    |
| 149 | TRUE   |
| 150 | FALSE  |

This is of course not very useful without knowing its corresponding field and test, so an expanded, flat set of results might look like this:

| Field        | Test                                             | Id  | Result |
|------------------|-------------------|------------------|------------------|
| Sepal.Length | is_missing                                       | 1   | TRUE   |
| Sepal.Length | is_missing                                       | 2   | FALSE  |
| Sepal.Length | is_missing                                       | ... | ...    |
| Sepal.Length | is_missing                                       | 138 | TRUE   |
| ...          |                                                  |     |        |
| Petal.Width  | is_not_between_4_and_7_when_species_is_virginica | 32  | NA     |
| ...          |                                                  |     |        |
| Petal.Width  | is_not_between_4_and_7_when_species_is_virginica | 138 | FALSE  |
| ...          |                                                  |     |        |
| Species      | is_not_within_known_set                          | 1   | TRUE   |
| ...          | ...                                              |     |        |

The objects I would need to keep track of included:

1.  the field-test catalog

2.  each field-test's source code, parameters, and description

3.  each field-test's results

4.  and the iris_tbl dataset itself

This smelled like the nested data workflow, but inverted. Rather than mapping one function to a group of datasets, I would feed one dataset to a group of functions.

# Nesting the Function Code into a Tibble

I made a hierarchical list for the field test functions, and then I converted it into a tibble like so:

```{r}

field_test_functions_list <- list(
  "Sepal.Length" = list(
    "is_missing" = function(data) {
      data %>% 
        mutate(result = is.na(Sepal.Length)) %>% 
        select(id, result)
    }
  ),
  "Sepal.Width" = list(
    "is_missing" = function(data) {
      data %>% 
        mutate(result = is.na(Sepal.Width)) %>% 
        select(id, result)
    }
  ),
  "Petal.Length" = list(
    "is_missing" = function(data) {
      data %>% 
        mutate(result = is.na(Petal.Width)) %>% 
        select(id, result)
    },
    "is_not_between_4_and_7_when_species_is_virginica" = function(data) {
      data %>% 
        mutate(result = if_else(Species == "virginica",  
                                !between(Petal.Length, 4, 7),
                                NA)) %>%
        select(id, result)
    }
  ),
  "Species" = list(
    "is_not_within_known_set" = function(data) {
      data %>% 
        mutate(result = 
                 !(Species %in% c("setosa", "versicolor", "virginica"))) %>% 
        select(id, result)
    }
  )
)

```

Now let's convert that to a tibble, in steps.

```{r}

lapply(field_test_functions_list, enframe, name = "test", value = "fun") 

```

Now let's make that into a tibble using `enframe()`:

```{r}

lapply(field_test_functions_list, enframe, name = "test", value = "fun") %>% 
  enframe(name = "field", value = "test_tibble") 

```

And one more step: `unnest()` the test_tibbles:

```{r}

field_test_tibble <- 
  lapply(field_test_functions_list, enframe, name = "test", value = "fun") %>% 
  enframe(name = "field", value = "test_tibble") %>%  
  unnest(test_tibble)

field_test_tibble

```

Now we have our Tidy field-tests tibble, and we're ready to iterate using `purrr::map`.

# The Real Trick: How to Invoke purrr::map()

We are iterating over test functions we've named `fun`, and we want to *execute* each of them. This is the really meta part: we want to `map()` the function `exec()` onto each `fun`.

In `purrr::map` syntax, we normally would map a function `.f` to data `.x` like this:

`map(.x = data, .f = fun)`

But instead we need to do this: `map(.x = fun, .f = exec)`

And since each `fun` expects the argument `data`, we pass it as a third argument:

`map(.x = fun, .f = exec, data = iris_tbl)`

This will produce our result tibble for each field test, so we can do that all within `mutate` like so:

```{r}
field_tests_with_results <- 
  field_test_tibble %>% 
  mutate(results = map(.x = fun, .f = exec, data = iris_tbl))

field_tests_with_results 
```

As you can see, Each field-test's field name, test name, code, and results are all tied together in a row.

And of course, we can then unnest our results into our desired tabular output:

```{r}
field_tests_with_results %>% 
  select(field, test, results) %>% 
  unnest(results)
```

*Note: since `data` is a constant, it doesn't need to live in our tibble, which would be duplicative and likely make our tibble enormous.*

But why do it this way? Couldn't I just do this using vectors and lists?

# A Fine but Less Tidy Method Using Lists

One way I might have done this before knowing about nested tibbles is to iterate over the field test list to create a separate, hierarchical results list.

This is...fine. But if you're used to working with Tidy tibbles and dplyr-like verbs you might find it unsatisfying.

Furthermore, if you care about future-proofing it for other users (including your future self), it might bother you that the field test code will be in one object and its results in another, since they aren't aware of each other and it's up to the developer to make sure the names stay correct. Mistakes happen!

In any case, here's how I would do it. Given the `field_test_functions_list` I created above, I would iterate over our fields using `lapply`, and within that, iterate over each of its tests using another `lapply`.

```{r results_in_list_form}

# iterate over field names, and test names within them, executing test functions on iris
field_test_results <- lapply(X = field_test_functions_list, 
                             # for each field fn, which is a list of tests...
                             FUN = function(tests) {
                               # execute each test, each of which are functions
                               lapply(X = tests, 
                                      FUN = function(test) {
                                        exec(test, data = iris_tbl)
                                      })
                             })

str(field_test_results) 

```

Now if we want to examine a given field test and its results, we would need to select it with a field name and a test name.

```{r}
fields <- names(field_test_functions_list)

tests <- names(field_test_functions_list[[fields[2]]])

field_test_functions_list[[fields[2]]][[tests[1]]]

field_test_results[[fields[2]]][[tests[1]]]
```

Again, this is fine, but it feels more precarious as a developer. Perhaps you might alleviate some of that fragility by storing the results and the functions in the same list. That would probably be an improvement. But still, a hierarchical list still doesn't lend itself to using tidyverse verbs, which is partially why I prefer my solution.

# Closing Thoughts

If you're familiar with the paradigm of iterating over nested data, hopefully this gets you thinking about extending that pattern. After all, you can nest anything into a cell.

For my data validation problem, I could have used a set of lists and `lapply`, but I find it more fragile and prefer playing well with the tidyverse, which likes tabular data. So I targeted building a single, Tidy tibble with columns for field, test name, each datapoint's id, and test result. The twist was to nest source code into a cell and using `purrr::map` to execute each test.
